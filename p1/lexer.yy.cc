#line 2 "lexer.yy.cc"

#line 4 "lexer.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int holyc::Scanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[189] =
    {   0,
        0,    0,   61,   59,   58,   53,   18,   59,   59,   59,
       47,   10,   11,   16,    1,   13,    2,   17,   51,   12,
       21,    3,   22,    4,   43,   43,   43,   43,    6,    7,
        5,   43,   43,   43,   43,   43,   43,   43,   43,   43,
        8,   59,    9,   20,    0,   56,    0,    0,    0,    0,
       52,   25,   50,   45,   15,   14,   51,   23,   19,   24,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   34,
       43,   43,   43,   43,   43,   26,   54,    0,    0,    0,
       54,    0,   56,    0,    0,   56,    0,    0,    0,   46,
       44,   49,   48,   43,   43,   43,   43,   43,   43,   43,

       27,   43,   43,   43,   43,    0,    0,    0,    0,    0,
        0,    0,   55,   57,    0,    0,   55,    0,    0,   55,
        0,    0,   55,   57,    0,   43,   43,   43,   29,   31,
       35,   43,   43,   43,   38,   33,   43,    0,    0,    0,
        0,    0,   57,    0,    0,    0,    0,   55,    0,    0,
        0,   55,    0,   43,   43,   43,   43,   43,   39,   43,
       43,   36,    0,    0,    0,    0,   55,    0,    0,   43,
       43,   43,   43,   43,   28,   37,   43,   42,   43,   30,
       32,   43,   43,   43,   41,   43,   40,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
       20,   21,    1,   22,   23,   23,   24,   23,   25,   26,
       23,   23,   23,   23,   23,   27,   28,   29,   30,   31,
       23,   32,   33,   34,   35,   23,   23,   23,   23,   23,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   23,   47,   48,   23,   23,   49,   23,   50,
       51,   52,   23,   53,   54,   55,   56,   57,   58,   23,
       23,   23,   59,   60,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    4,    1,    1,    5,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[212] =
    {   0,
        0,    0,  415,  528,  528,  528,  393,   60,  410,  404,
      373,  528,  528,  528,  397,  528,  394,  528,  390,  528,
      386,  384,  383,  528,  385,   46,   47,   49,  528,  528,
      528,   50,   51,   53,   52,   54,   60,   55,   56,   59,
      528,  339,  528,  528,   79,   75,  393,   81,   83,  395,
      528,  528,  528,   72,  528,  528,  379,  528,  528,  528,
        0,  378,   79,   72,   86,   70,   74,   75,   94,  377,
       96,   97,   78,  100,  102,  528,  388,  120,  118,  119,
      528,  126,  121,  134,  135,  139,  140,  144,  160,  528,
      528,  528,  528,  136,  143,  137,  130,  113,  142,  144,

      151,  156,  161,  163,  165,  178,  180,  186,  181,  188,
      187,  199,  190,  387,  203,  208,  191,  214,  224,  528,
      229,  237,  239,  244,  245,  231,  237,  192,  205,  215,
      374,  220,  216,  203,  373,  372,  235,  257,  268,  255,
      270,  284,  272,  285,  383,  291,  296,  297,  301,  306,
      308,  310,  312,  261,  302,  271,  299,  307,  365,  310,
      280,  362,  321,  324,  327,  337,  348,  350,  364,  331,
      327,  340,  314,  320,  360,  268,  348,  266,  351,  246,
      194,  354,  355,  359,  183,  358,  115,  528,  419,  424,
      427,  429,  434,  439,  444,  449,  452,  457,  462,  467,

      472,  477,  482,  487,  492,  497,  502,  507,  512,  517,
      522
    } ;

static yyconst flex_int16_t yy_def[212] =
    {   0,
      188,    1,  188,  188,  188,  188,  188,  189,  190,  188,
      191,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  192,  192,  192,  192,  188,  188,
      188,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      188,  188,  188,  188,  189,  193,  188,  194,  195,  190,
      188,  188,  188,  196,  188,  188,  188,  188,  188,  188,
      197,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  188,  188,  193,  198,  199,
      188,  194,  198,  195,  200,  201,  202,  203,  189,  188,
      188,  188,  188,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  198,  199,  204,  205,  206,
      193,  200,  198,  207,  203,  201,  198,  208,  202,  188,
      209,  200,  201,  202,  203,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  204,  206,  205,
      210,  204,  205,  206,  207,  211,  201,  201,  211,  202,
      202,  202,  202,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  205,  205,  205,  201,  204,  211,  208,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,    0,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188
    } ;

static yyconst flex_int16_t yy_nxt[590] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,    4,   18,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   26,   25,   25,   27,   25,
       25,   25,   25,   28,   25,   29,    4,   30,   31,   25,
       25,   32,   33,   25,   34,   35,   25,   36,   25,   25,
       25,   25,   37,   25,   38,   25,   39,   40,   41,   42,
       43,   46,   61,   61,   47,   61,   61,   61,   61,   61,
       61,   61,   61,   91,   48,   61,   61,   63,   65,   77,
       46,   64,   83,   77,   86,   81,   61,   87,   61,   79,
       61,   61,   69,   48,   61,   61,   49,   67,   95,   70,

       66,   68,   61,   71,   72,   75,   74,   73,   94,   96,
       61,   80,   61,   61,   98,   49,   61,   84,   61,   88,
       97,   92,   81,  109,   77,  188,   93,   83,   99,   61,
      188,   61,   89,  103,   79,   86,  113,   89,   87,  114,
      117,  120,  100,  114,  114,  123,   61,  104,  124,  105,
      101,  102,   61,   61,  107,  110,   80,  107,   61,   61,
       61,   46,   84,  126,   47,  130,  128,   61,  111,  127,
       88,  115,   61,  111,   48,  118,  121,   61,  129,   61,
      125,   61,  188,   82,  109,  114,  131,  106,   82,  108,
      114,   47,  143,  112,  188,  188,   49,  132,  112,   61,

      113,   79,  133,  114,  123,  135,  136,  124,   61,  117,
       61,  134,  114,  137,  107,  148,  110,  141,  124,   61,
      156,   61,  139,   80,  144,  120,  107,  107,  114,  106,
      152,   61,   61,  124,  106,  115,   61,  138,  113,  125,
      117,  114,  138,  114,  146,  120,  123,   61,  114,  124,
      149,   61,  112,   61,  154,  161,  157,  112,  106,  114,
      150,  114,   61,  116,  159,  153,  158,  155,  116,  108,
      160,  109,  143,  115,  143,  118,  114,   61,  119,  162,
      121,  125,   61,  119,   61,  106,  108,   61,  114,  143,
      170,  163,  167,  139,  112,  143,   61,  117,  117,  112,

      114,  114,  167,  172,  144,  143,  165,  120,  141,  120,
      114,  120,  114,  120,  114,   61,  114,  138,   61,  140,
      139,  144,  138,   61,  140,  114,   61,  168,  114,  176,
       61,  114,  118,  118,  138,  171,   61,  169,  117,  138,
      116,  114,  150,   61,  121,  116,  121,   61,  121,  106,
      116,  167,  114,  173,  143,  116,   61,  163,  178,  177,
      141,  174,  175,  141,   61,  148,  180,   61,  124,  179,
       61,   61,  181,  146,   61,   61,   61,  183,   61,  185,
      182,   61,  187,  184,  139,  186,  168,  114,   61,   61,
       61,  114,   81,   61,   61,   57,   51,   81,   76,  116,

      149,   61,   60,   59,  116,   58,   57,   56,   55,   54,
       52,   51,   44,  116,  188,  188,  188,  188,  116,   45,
       45,   45,   45,   45,   50,   50,   50,   50,   50,   53,
       53,   62,  188,   62,   78,   78,   78,   78,   78,   82,
       82,   82,   82,   82,   85,   85,   85,   85,   85,   90,
       90,   90,   90,   90,   61,  188,   61,  106,  106,  106,
      106,  106,  108,  108,  108,  108,  108,  112,  112,  112,
      112,  112,  116,  116,  116,  116,  116,  119,  119,  119,
      119,  119,  122,  122,  122,  122,  122,  138,  138,  138,
      138,  138,  140,  188,  140,  140,  140,  142,  142,  142,

      142,  142,  145,  188,  145,  188,  145,  147,  147,  147,
      147,  147,  151,  151,  151,  151,  151,  164,  164,  164,
      164,  164,  166,  166,  166,  166,  166,    3,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188
    } ;

static yyconst flex_int16_t yy_chk[590] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,   26,   27,    8,   28,   32,   33,   35,   34,
       36,   38,   39,   54,    8,   40,   37,   26,   28,   46,
       45,   27,   48,   45,   49,   48,   66,   49,   64,   46,
       67,   68,   35,   45,   73,   63,    8,   33,   64,   36,

       32,   34,   65,   36,   37,   40,   39,   38,   63,   65,
       69,   46,   71,   72,   67,   45,   74,   48,   75,   49,
       66,   54,   79,   80,   78,   83,   54,   82,   68,   98,
       82,  187,   49,   73,   78,   84,   85,   49,   84,   85,
       86,   87,   69,   86,   87,   88,   97,   74,   88,   75,
       71,   72,   94,   96,   79,   80,   78,   83,   99,   95,
      100,   89,   82,   94,   89,   98,   96,  101,   80,   95,
       84,   85,  102,   80,   89,   86,   87,  103,   97,  104,
       88,  105,  106,   84,  107,  109,   99,  108,   84,  110,
      108,  111,  110,   88,  113,  117,   89,  100,   88,  185,

      112,  111,  101,  112,  115,  103,  104,  115,  128,  116,
      181,  102,  116,  105,  106,  118,  107,  109,  118,  134,
      128,  129,  108,  111,  110,  119,  113,  117,  119,  107,
      121,  130,  133,  121,  107,  112,  132,  110,  122,  115,
      123,  122,  110,  123,  116,  124,  125,  126,  124,  125,
      118,  137,  115,  127,  126,  134,  129,  115,  138,  140,
      119,  138,  180,  118,  132,  121,  130,  127,  118,  139,
      133,  141,  139,  122,  141,  123,  143,  154,  121,  137,
      124,  125,  178,  121,  176,  142,  144,  156,  142,  144,
      154,  140,  146,  138,  125,  146,  161,  147,  148,  125,

      147,  148,  149,  156,  139,  149,  141,  150,  143,  151,
      150,  152,  151,  153,  152,  157,  153,  139,  155,  141,
      142,  144,  139,  158,  141,  163,  160,  146,  164,  161,
      173,  165,  147,  148,  144,  155,  174,  149,  166,  144,
      146,  166,  150,  171,  151,  146,  152,  170,  153,  167,
      149,  168,  167,  157,  168,  149,  172,  163,  171,  170,
      164,  158,  160,  165,  177,  169,  173,  179,  169,  172,
      182,  183,  174,  166,  186,  184,  175,  179,  162,  183,
      177,  159,  186,  182,  167,  184,  168,  145,  136,  135,
      131,  114,   77,   70,   62,   57,   50,   47,   42,  168,

      169,   25,   23,   22,  168,   21,   19,   17,   15,   11,
       10,    9,    7,  169,    3,    0,    0,    0,  169,  189,
      189,  189,  189,  189,  190,  190,  190,  190,  190,  191,
      191,  192,    0,  192,  193,  193,  193,  193,  193,  194,
      194,  194,  194,  194,  195,  195,  195,  195,  195,  196,
      196,  196,  196,  196,  197,    0,  197,  198,  198,  198,
      198,  198,  199,  199,  199,  199,  199,  200,  200,  200,
      200,  200,  201,  201,  201,  201,  201,  202,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  204,  204,  204,
      204,  204,  205,    0,  205,  205,  205,  206,  206,  206,

      206,  206,  207,    0,  207,    0,  207,  208,  208,  208,
      208,  208,  209,  209,  209,  209,  209,  210,  210,  210,
      210,  210,  211,  211,  211,  211,  211,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188
    } ;

static yyconst flex_int16_t yy_rule_linenum[60] =
    {   0,
       37,   71,   80,   89,   96,  103,  110,  117,  124,  131,
      138,  145,  152,  159,  166,  173,  180,  187,  194,  201,
      208,  215,  222,  229,  236,  243,  250,  257,  264,  271,
      278,  285,  292,  299,  306,  313,  320,  327,  334,  341,
      348,  355,  362,  368,  377,  385,  395,  403,  408,  413,
      419,  436,  441,  445,  451,  460,  469,  479,  487
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "holyc.l"
#line 2 "holyc.l"
#include <string>
#include <limits.h>

/* Get our custom yyFlexScanner subclass */
#include "scanner.hpp"
#include "tokens.hpp"
#undef  YY_DECL
#define YY_DECL int holyc::Scanner::yylex( holyc::Parser::semantic_type * const lval )

/* define yyterminate as this instead of NULL */
#define yyterminate() return( TokenKind::END )

/* Exclude unistd.h for Visual Studio compatability. */
#define YY_NO_UNISTD_H

/* typedef to make the reference to token kinds shorter */
using TokenKind = holyc::Parser::token;

#line 717 "lexer.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 30 "holyc.l"

          /** Code executed at the beginning of yylex **/
            yylval = lval;




#line 882 "lexer.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 189 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 528 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 60 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 60 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 61 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "holyc.l"
{
  // Keep track of the "kind" of token we matched. In this case,
  // it's a CROSS (aka the plus symbol). The full list of token
  // kinds is declared around line 197 of grammar.hh. The testing
  // functionScanner::outputTokens also indicates what each token
  // represents (declared in scanner.cpp line 9)
  
  int tokenKind = TokenKind::CROSS;

  //Instatiate a token. There are 4 classes of tokens defined based on 
  // - a literal string (StringLitToken)
  // - a literal integer (IntLitToken)
  // - an identifier (IDToken)
  // - a base Token (any other type)
  // The token object is a handy place to keep information about the
  // token (i.e. token metadata) such as the line and column on which
  // the token character started (which can be used later in debug 
  // messages, etc). 
  Token * token = new Token(lineNum, colNum, tokenKind);
  //Assign the token to a instance variable of the scanner.
  // (When Flex processes a .l file in C++ mode, it creates 
  // a class called Scanner, which is a subclass of yyFlexScanner)
  // By assigning a value to this field, we put the token
  // metadata in a place where scanner's client program can find it.
  this->yylval->tokenValue = token;

  //Since we consumed 1 character, increase the column number by 1
  colNum++;

  //Let the scanner's client program know that a CROSS token
  // has been matched
  return tokenKind;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "holyc.l"
{
  //Essentially the same thing as CROSS, but without the verbose
  // comments so it doesn't look so scary.
  int tokenKind = TokenKind::DASH;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "holyc.l"
{
  //Essentially the same thing as CROSS, but without the verbose
  // comments so it doesn't look so scary.
  int tokenKind = TokenKind::ASSIGN;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "holyc.l"
{ 
  int tokenKind = TokenKind::AT;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "holyc.l"
{ 
  int tokenKind = TokenKind::CARAT;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
}  
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "holyc.l"
{ 
  int tokenKind = TokenKind::LBRACE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 110 "holyc.l"
{ 
  int tokenKind = TokenKind::RBRACE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "holyc.l"
{ 
  int tokenKind = TokenKind::LCURLY;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 124 "holyc.l"
{ 
  int tokenKind = TokenKind::RCURLY;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "holyc.l"
{ 
  int tokenKind = TokenKind::LPAREN;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 138 "holyc.l"
{ 
  int tokenKind = TokenKind::RPAREN;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 145 "holyc.l"
{ 
  int tokenKind = TokenKind::SEMICOLON;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 152 "holyc.l"
{ 
  int tokenKind = TokenKind::COMMA;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 159 "holyc.l"
{ 
  int tokenKind = TokenKind::DASHDASH;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 166 "holyc.l"
{ 
  int tokenKind = TokenKind::CROSSCROSS;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 173 "holyc.l"
{ 
  int tokenKind = TokenKind::STAR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 180 "holyc.l"
{ 
  int tokenKind = TokenKind::SLASH;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 187 "holyc.l"
{ 
  int tokenKind = TokenKind::NOT;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
} 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 194 "holyc.l"
{ 
  int tokenKind = TokenKind::EQUALS;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 201 "holyc.l"
{ 
  int tokenKind = TokenKind::NOTEQUALS;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 208 "holyc.l"
{ 
  int tokenKind = TokenKind::GREATER;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
}  
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 215 "holyc.l"
{ 
  int tokenKind = TokenKind::LESS;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum++;
  return tokenKind;
}  
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 222 "holyc.l"
{ 
  int tokenKind = TokenKind::LESSEQ;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 229 "holyc.l"
{ 
  int tokenKind = TokenKind::GREATEREQ;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 236 "holyc.l"
{ 
  int tokenKind = TokenKind::AND;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
} 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "holyc.l"
{
  int tokenKind = TokenKind::OR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + 2;
  return tokenKind;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 250 "holyc.l"
{
  int tokenKind = TokenKind::INT;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 257 "holyc.l"
{
  int tokenKind = TokenKind::INTPTR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 264 "holyc.l"
{
  int tokenKind = TokenKind::BOOL;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 271 "holyc.l"
{
  int tokenKind = TokenKind::BOOLPTR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 278 "holyc.l"
{
  int tokenKind = TokenKind::CHAR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 285 "holyc.l"
{
  int tokenKind = TokenKind::CHARPTR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 292 "holyc.l"
{
  int tokenKind = TokenKind::VOID;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 299 "holyc.l"
{
  int tokenKind = TokenKind::IF;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 306 "holyc.l"
{
  int tokenKind = TokenKind::ELSE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 313 "holyc.l"
{
  int tokenKind = TokenKind::WHILE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 320 "holyc.l"
{
  int tokenKind = TokenKind::RETURN;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 327 "holyc.l"
{
  int tokenKind = TokenKind::TRUE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 334 "holyc.l"
{
  int tokenKind = TokenKind::FALSE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 341 "holyc.l"
{
  int tokenKind = TokenKind::FROMCONSOLE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 348 "holyc.l"
{
  int tokenKind = TokenKind::TOCONSOLE;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 355 "holyc.l"
{
  int tokenKind = TokenKind::NULLPTR;
  this->yylval->tokenValue = new Token(lineNum, colNum, tokenKind);
  colNum = colNum + yyleng;
  return tokenKind;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 362 "holyc.l"
{
  yylval->tokenValue = new IDToken(lineNum, colNum, yytext);
  colNum = colNum + yyleng;
  return TokenKind::ID;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 368 "holyc.l"
{
  // thrown when user gives '\ and no character to escape
  std::string yystring(yytext);
  std::string msg = "Empty escape sequence in character literal"; 
  Report::fatal(lineNum,colNum,msg);
  colNum = 1;
  lineNum++;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 377 "holyc.l"
{
  // thrown when user gives '\ and no character to escape
  std::string yystring(yytext);
  std::string msg = "Empty escape sequence in character literal"; 
  Report::fatal(lineNum,colNum,msg);
  colNum += yyleng;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 385 "holyc.l"
{
  // thrown when user gives '\ and no character to escape
  std::string yystring(yytext);
  std::string msg = "Bad escape sequence in char literal"; 
  Report::fatal(lineNum,colNum,msg);
  colNum += yyleng;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 395 "holyc.l"
{
  // thrown when user gives ' then end of file
  std::string yystring(yytext);
  std::string msg = "Empty character literal"; 
  Report::fatal(lineNum,colNum,msg);
  colNum += yyleng;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 403 "holyc.l"
{
  yylval->tokenValue = new CharLitToken(lineNum, colNum, '\t');
  colNum = colNum + yyleng;
  return TokenKind::CHARLIT;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 408 "holyc.l"
{
  yylval->tokenValue = new CharLitToken(lineNum, colNum, '\n');
  colNum = colNum + yyleng;
  return TokenKind::CHARLIT;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 413 "holyc.l"
{
  yylval->tokenValue = new CharLitToken(lineNum, colNum, *&yytext[1]);
  colNum = colNum + yyleng;
  return TokenKind::CHARLIT;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 419 "holyc.l"
{
  int intVal = 0;
  try
  {
    intVal = std::stoi(yytext);
  } catch(const std::out_of_range& oor)
  {
    std::cout << "WARN [" << lineNum << "," << colNum << "]: Integer literal too large; using max value" << std::endl;
    intVal = INT_MAX;
  }
  yylval->tokenValue = new IntLitToken(lineNum, colNum, intVal);
  colNum += strlen(yytext);
  return TokenKind::INTLITERAL;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 436 "holyc.l"
{
  lineNum++;
  colNum = 1;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 441 "holyc.l"
{
  colNum = colNum + yyleng;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 445 "holyc.l"
{
  yylval->tokenValue = new StrToken(lineNum, colNum, yytext);
  colNum = colNum + yyleng;
  return TokenKind::STRLITERAL;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 451 "holyc.l"
{
  // thrown when user does not close string literal AND has bad escape sequence.
  std::string yystring(yytext);
  std::string msg = "Unterminated string literal with bad escape sequence ignored"; 
  Report::fatal(lineNum,colNum,msg);
  colNum = 1;
  lineNum++;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 460 "holyc.l"
{
  // thrown when user does not close string literal
  std::string yystring(yytext);
  std::string msg = "Unterminated string literal ignored"; 
  Report::fatal(lineNum,colNum,msg);
  colNum = 1;
  lineNum++;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 469 "holyc.l"
{
  // thrown when user gives string literal bad escape sequence.
  std::string yystring(yytext);
  std::string msg = "String literal with bad escape sequence ignored"; 
  Report::fatal(lineNum,colNum,msg);
  colNum += yyleng;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 479 "holyc.l"
{
  //Update the line number, reset the columnNumber
  lineNum++;
  colNum = 1;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 487 "holyc.l"
{
  //TODO: Add the rest of the rules above this point so that legal characters
  // are properly accounted for. 
  std::string yystring(yytext);
  std::string msg = "Illegal character " + yystring;
  Report::fatal(lineNum,colNum,msg);
  colNum += yyleng;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 495 "holyc.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1638 "lexer.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput( char* buf, size_t /* max_size */ )
#else
size_t yyFlexLexer::LexerInput( char* buf, size_t max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, size_t size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 189 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 189 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 188);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 495 "holyc.l"



